Goal: Learn how to create an upgreadable smart contract

------------DONE------------
I. Learn just watch first. DONE

II. Then take notes. DONE

III. Then execute the code based on the latest version. 
3.1. Follow the tutorial
https://docs.openzeppelin.com/learn/deploying-and-interacting
https://docs.openzeppelin.com/learn/upgrading-smart-contracts?pref=hardhat

D:& cd D:\USER\Downloads\ATLAS\Projects\Mastering-Security-Token-ERC-3643\Upgradeable-Smart-Contract-Mastering

npx hardhat node

npm install --save-dev @openzeppelin/hardhat-upgrades

https://docs.openzeppelin.com/learn/setting-up-a-node-project#creating-a-project

npm init -y

yarn init

yarn add --dev hardhat

npm install --save-dev hardhat

npx hardhat compile --force

npm install @openzeppelin/contracts
s
npx hardhat node

npm install --save-dev @nomicfoundation/hardhat-ethers ethers


---------INITIAL LOCAL DEPLOYMENT---------

npx hardhat run --network localhost scripts/deploy.js


Interacting with hardhat console:

npx hardhat console --network localhost
Box deployed to: 0x5FbDB2315678afecb367f032d93F642f64180aa3

const Box = await ethers.getContractFactory('Box')
const box = Box.attach('0x5FbDB2315678afecb367f032d93F642f64180aa3')

await box.store(42)
await box.retrieve()

npx hardhat run --network localhost scripts/index.js

---------DEPLOYING LOCAL UPGRADEABLE VERSION---------

npm install --save-dev @openzeppelin/hardhat-upgrades

npx hardhat run --network localhost scripts/deploy_upgradeable_box.js

Box deployed to:  0xa513E6E4b8f2a923D98304ec87F64353C4D5C853

Interacting with hardhat console:

npx hardhat console --network localhost

const Box = await ethers.getContractFactory('Box')

const box = Box.attach('0xa513E6E4b8f2a923D98304ec87F64353C4D5C853')

(await box.retrieve()).toString();

await box.increment()

(await box.retrieve()).toString();



---------DEPLOYING LOCAL UPGRADED V2 VERSION---------

npx hardhat run --network localhost scripts/upgrade_box_V2.js

npx hardhat console --network localhost

const BoxV2 = await ethers.getContractFactory('BoxV2');

const box = await BoxV2.attach('0xa513E6E4b8f2a923D98304ec87F64353C4D5C853');

await box.increment();

(await box.retrieve()).toString();



---------DEPLOYING LOCAL UPGRADED V3 VERSION---------

npx hardhat run --network localhost scripts/upgrade_box_V3.js

npx hardhat console --network localhost

const BoxV3 = await ethers.getContractFactory('BoxV3');

const box = await BoxV3.attach('0xa513E6E4b8f2a923D98304ec87F64353C4D5C853');

(await box.retrieve()).toString();

await box.increment();

(await box.retrieve()).toString();

await box.multiply();

(await box.retrieve()).toString();

3.2. Follow the environment tutorial and do a third update to answer the questions below on local testnet DONE

3.3. Deploy the same Box smart contracts on testnet. One at a time validate and see V1, V2, V3 DONE

-------------------------------------------------------
---------DEPLOYING TESTNET UPGRADEABLE VERSION---------
-------------------------------------------------------

START BY GETTING A PRIVATE KEY FROM AN ACCOUNT IN METAMASK TO ADD TO AN .ENV FILE

npx hardhat run --network polygonAmoy scripts/deploy_testnet_ordinary.js


NEW WALLET: 0x78eb464e7447B95eAdB8b14d8323516B043BE6FC

npm install --save-dev @openzeppelin/hardhat-upgrades

npx mnemonics

npx hardhat console --network polygonAmoy

const accounts = await ethers.getSigners()

accounts[0]
0x78eb464e7447B95eAdB8b14d8323516B043BE6FC

(await ethers.provider.getBalance(accounts[0])).toString()


npx hardhat run --network polygonAmoy scripts/deploy_testnet_upgradeable_box.js

(IMPLEMENTATION) Stores the logic
0xEE522741a4D77F9d48c547a829B5f0F60f9E06a0
0x1f4dc2bd2fe291c3cce9963491827af53858e13e

(PROXY) Stores the variables
Box deployed to: 0x77dd7D71dcc6e071a47eefbeBcdb1Ad9b861f500
0x7c14adc7e38baf706157906c9c649b422e698405

(PROXY ADMIN)
0x3129AbBFf665092658E0159c5Ddd648Cf59dEF79
0xA864c45b5144A8D2ee428343EC836789C4854cC5


npm install --save-dev @nomicfoundation/hardhat-verify

npx hardhat verify --network polygonAmoy 0x1f4dc2bd2fe291c3cce9963491827af53858e13e

npx hardhat verify --network polygonAmoy 0x7c14adc7e38baf706157906c9c649b422e698405


Interacting with hardhat console:

npx hardhat console --network polygonAmoy 

const Box = await ethers.getContractFactory('Box')

const box = Box.attach('0x77dd7D71dcc6e071a47eefbeBcdb1Ad9b861f500')

(await box.retrieve()).toString();


---------DEPLOYING TESTNET UPGRADED V2 VERSION---------

npx hardhat run --network polygonAmoy scripts/upgrade_testnet_box_V2.js

(IMPLEMENTATION V2) Stores the updated logic
0x682F30C4b1C8471113A757De4E1DA9a8AeEE73dB

npx hardhat verify --network polygonAmoy 0x682F30C4b1C8471113A757De4E1DA9a8AeEE73dB


npx hardhat console --network polygonAmoy

const BoxV2 = await ethers.getContractFactory('BoxV2');

const box = await BoxV2.attach('0x77dd7D71dcc6e071a47eefbeBcdb1Ad9b861f500');

await box.increment();

(await box.retrieve()).toString();


---------DEPLOYING TESTNET UPGRADED V3 VERSION---------

npx hardhat run --network polygonAmoy scripts/upgrade_testnet_box_V3.js

(IMPLEMENTATION V3) Stores the updated logic
0x96f35a667bd73611bd0ef0bb542e51c9ee3eb1ca

npx hardhat verify --network polygonAmoy 0x96F35a667BD73611BD0ef0bb542E51C9EE3eb1CA


npx hardhat console --network polygonAmoy

const BoxV3 = await ethers.getContractFactory('BoxV3');

const box = await BoxV3.attach('0x77dd7D71dcc6e071a47eefbeBcdb1Ad9b861f500');

(await box.retrieve()).toString();

await box.increment();

(await box.retrieve()).toString();

await box.multiply();

(await box.retrieve()).toString();

---------DEPLOYING TESTNET UPGRADED V3 VERSION---------

npx hardhat run --network polygonAmoy scripts/upgrade_testnet_box_V4.js

(IMPLEMENTATION V4) Stores the updated logic
0x8148cAADfef0d2A8FE9C9298587d7ef8F03d5f8A

npx hardhat verify --network polygonAmoy 0x8148cAADfef0d2A8FE9C9298587d7ef8F03d5f8A


------------TODO------------



IV. Check how to calculate tokens to retrieve based on price and amount. Turn hydraxis smart contract into an upgradeable one. 

V. Follow the whole path for safe deployment based on notes taken in Cherry Tree. Ethereum Developer Bootcamp.

VI. Start working on the deployment of the staking smart contract with the new knowledge.


-------------------------------------------------
-----------------OTHER TUTORIALS-----------------
https://docs.alchemy.com/docs/upgradeable-smart-contracts

Upgrade ERC-20





------------------------------------


QUESTIONS

When you deploy a new implementation, if you don't add the previous functions you had in V1 to V2, do they just dissapear and they cant be called anymore? So if I want to have V1 functions in V2 I would need to copy and paste them?

YES SIR! They just dissapear and can't be called anymore. If you want to have them back you better copy and paste them.

